name: Backend CI

on:
  push:
    # TODO enable later again
    #paths:
    #  - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'


jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    strategy:
      matrix:
        go-version: [ '1.22.x' ]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: go get .
      - name: Build
        run: go build -v ./...
      - name: Test with the Go CLI
        run: go test
  
  integration-test:
    #runs-on: ubuntu-latest
    runs-on: windows-latest
    # TODO enable needs later
    #needs: build
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      #- name: Install winget
      #  uses: Cyberboss/install-winget@v1##

      #- name: Configure winget settings
      #  run: |
      #    echo '{ "sourceAgreements": [{ "sourceIdentifier": "msstore", "accepted": true }], "locale": "en-US" }' > $env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json
      #  shell: pwsh
      

      # Install Function Core Tools
      #- name: Install Azure Functions Core Tools
      #  run: winget install Microsoft.AzureFunctionsCoreTools --disable-interactivity --accept-source-agreements

      #- name: Azure Functions Action
      #  uses: Azure/functions-action@v1.5.1
      #  with:
      #    app-name: 'backend'

      #- name: Install Azure Functions Core Tools
      #  run: |
      #    # Define the URL and download path
      #    $url = "https://go.microsoft.com/fwlink/?linkid=2174087"
      #    $output = "downloaded_installer.msi"###

      #    # Download the MSI file
      #    Invoke-WebRequest -Uri $url -OutFile $output#

      #    # Install the MSI file silently
      #    Start-Process msiexec.exe -ArgumentList '/i', $output, '/qn', '/norestart' -NoNewWindow -Wait
      #  shell: pwsh

      - name: Install npm
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Azure Functions Core Tools
        run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Print the version of Azure Functions Core Tools
        run: func --version

      - uses: southpolesteve/cosmos-emulator-github-action@v1

      # Setup python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      
      # Install dependencies
      - name: Install dependencies
        run: pip install -r test/requirements.txt
      
      # Run the integration tests
      - name: Run sanity check
        run: cd test; pytest test_base.py

      - name: Prepare db/container for test
        run: cd test; python prepare_fixture.py
      
      # Install go 1.22
      - name: Install Go 1.22
        uses: actions/setup-go@v2
        with: 
          go-version: 1.22

      # Build handler
      - name: Build handler
        run: mkdir bin; go build -o bin/handler .
      
      - name: Rename settings file
        run: Rename-Item -Path test.settings.json -NewName local.settings.json

      - name: Where is func
        run: Get-Command func | Select-Object -ExpandProperty Source
        shell: pwsh
      
      - name: Print PATH
        run: echo $env:PATH
        shell: pwsh
      
      - name: Set Execution Policy
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Unrestricted
        shell: pwsh
      
      - name: Start func
        run: |
          $funcScriptPath = Get-Command func | Select-Object -ExpandProperty Source
          $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo
          $ProcessInfo.FileName = "pwsh"
          $ProcessInfo.RedirectStandardError = $true
          $ProcessInfo.RedirectStandardOutput = $true
          $ProcessInfo.UseShellExecute = $false
          $ProcessInfo.Arguments = "-File `"$funcScriptPath`" start --port 8000"
          $Process = New-Object System.Diagnostics.Process
          $Process.StartInfo = $ProcessInfo
          $Process.Start() | Out-Null
          $Process.Id > func.pid
          Start-Sleep -Seconds 30  # Allows some time for the function to initialize
        shell: pwsh
    

        #$funcPath = (Get-Command func).Source
        #Start-Process -NoNewWindow -FilePath $funcPath -ArgumentList "start", "--port 8000" -RedirectStandardOutput "func.log"

      #- name: Delay before running tests
      #  run: Start-Sleep -Seconds 30

      - name: List tasks
        run: tasklist
        shell: cmd

      # Run the integration tests
      - name: Run integration tests
        run: cd test; pytest
      
      - name: List tasks
        run: tasklist
        shell: cmd
    
      - name: Cleanup
        if: always()
        run: |
          if (Test-Path func.pid) {
            $pid = Get-Content func.pid
            Stop-Process -Id $pid -Force
          } else {
            Write-Output "No PID file found."
          }
        shell: pwsh

      - name: Output func logs
        if: always()
        run: Get-Content "func.log" -Raw | Write-Output
      
      
      # Setup Docker
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v2

      #- name: Docker build
      #  run: docker build -t backend:test ..
      
      #- name: Docker run
      #  run: docker run -d --network host -e COSMOS_DB_CONNECTION="AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==;" --name backend backend:test
      
      # Setup Docker Compose TODO make it nicer
      #- name: Install Docker Compose
      #  run: |
      #    sudo apt-get install -y docker-compose
      #    docker-compose --version
      
      # Build the Docker Compose services
      #- name: Build Docker Compose services
      #  run: docker-compose build
      
      # Run the Docker Compose services
      #- name: Run Docker Compose services
      #  run: docker-compose up -d


      
      # Wait for 20s
      #- name: Wait for services to start
      #  run: sleep 20
      
      # Print Docker Compose logs
      #- name: Print Docker Compose logs
      #  run: docker-compose logs
      
      # Setup python
      #- name: Set up Python
      #  uses: actions/setup-python@v2
     #   with:
      #    python-version: '3.11'
      

      #- name: Import emulator's TLS/SSL certificate
      #  run: |
      #    curl -k https://localhost:8081/_explorer/emulator.pem > ~/emulatorcert.crt
      #    cat ~/emulatorcert.crt
      #    sudo cp ~/emulatorcert.crt /usr/local/share/ca-certificates/
      #    sudo update-ca-certificates
      
      # Print Docker Compose logs
      #- name: Print Docker logs
      #  if: always()
      #  run: docker logs backend

      # Stop the Docker Compose services
      #- name: Stop Docker Compose services
      #  run: docker-compose down
      
      


    
